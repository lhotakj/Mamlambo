# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
      #- image: circleci/python:3.6.1
      #- image: lhotakj/centos-apache-mod_wsgi-python3
      - image: circleci/python:3.7.3

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo

    steps:
      - checkout
      - setup_remote_docker:
            version: 18.06.0-ce

      - run:
          name: Login to docker.io
          command: |
            echo "$DOCKER_PASS" | docker login --username $DOCKER_USER --password-stdin

      - run:
          name: Run docker
          command: |
            echo "$DOCKER_PASS" | docker login --username $DOCKER_USER --password-stdin
            docker run -idt --rm -v /sys/fs/cgroup:/sys/fs/cgroup:ro -p 8080:80 --tmpfs /run --tmpfs /run/lock --name=mamlambo lhotakj/centos-apache-mod_wsgi-python3:3.7.4
            docker inspect mamlambo | grep "IPAddress"
      - run:
          name: Fast check - request
          command: |
            curl -IL http://172.17.0.2:8080
            #HTTP_STATUS="$(curl -IL --silent http://172.17.0.2:80 | grep HTTP )"
            #SERVER_HEADER=$(curl -IL --silent http://172.17.0.2:80 | grep Server:)"

      - run:
          name: Fast check - test
          command: |
            if [[ ! "$HTTP_STATUS" =~ "200 OK" ]]
            then
               echo "Invalid HTTP code: $HTTP_STATUS"
               docker container kill mamlambo
               exit 0
            fi

            if [[ ! "$SERVER_HEADER" =~ "mod_wsgi/4.6.5" ]]
            then
               echo "Invalid Server header: $SERVER_HEADER"
               docker container kill mamlambo
               exit 0
            fi
            echo "killing container"
            docker container kill mamlambo

      # Download missing tools
      - run:
          name: install additional packages
          command: |
            yum install git unzip -y -q

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements.txt

      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}

      # run tests!
      # this example uses Django's built-in test-runner
      # other common Python testing frameworks include pytest and nose
      # https://pytest.org
      # https://nose.readthedocs.io
      - run:
          name: Download Sonar
          command: |
            mkdir -p /tmp/sonar
            mkdir -p ~/sonar
            cd /tmp/sonar
            wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.0.0.1744-linux.zip
            unzip -qq ./sonar-scanner-cli-4.0.0.1744-linux.zip -d ~/sonar/
            rm -rf /tmp/sonar
  
      - run:
          name: SonarQube scan
          command: |
            ~/sonar/sonar-scanner-4.0.0.1744-linux/bin/sonar-scanner \
              -Dsonar.projectKey=Mamlambo \
              -Dsonar.organization=lhotakj-github \
              -Dsonar.sources=. \
              -Dsonar.host.url=https://sonarcloud.io \
              -Dsonar.projectVersion=$CIRCLE_BUILD_NUM \
              -Dsonar.login=$SONAR_TOKEN
      
      #- run:
      #    name: run tests
      #    command: |
      #      . venv/bin/activate
      #      python manage.py test

      - store_artifacts:
          path: test-reports
          destination: test-reports
